diff --git a/app/components/GiftManagement/AddGifts.js b/app/components/GiftManagement/AddGifts.js
index 35d0f1c..b09b5f2 100644
--- a/app/components/GiftManagement/AddGifts.js
+++ b/app/components/GiftManagement/AddGifts.js
@@ -19,6 +19,23 @@ const AddGifts = () => {
   const [items, setItems] = useState([]);
   const [guestList, setGuestList] = useState([]);
 
+  const [selectedGuest, setSelectedGuest] = useState('');
+  const [selectedEvent, setSelectedEvent] = useState('');
+  const [selectedGiftmode, setSelectedGiftmode] = useState('');
+
+  const [amountInput, setAmountInput] = useState(0);
+
+  const [giftMode, setGiftMode] = useState([
+    {
+      label: 'Amount',
+      value: 'amount',
+    },
+    {
+      label: 'Item',
+      value: 'item',
+    },
+  ]);
+
   useEffect(() => {
     const transformedEvents = events.map((event) => ({
       label: event.name,
@@ -53,10 +70,14 @@ const AddGifts = () => {
   const phoneInput = useInput('', (value) =>
     value.trim() !== '' && value.length === 10 ? null : 'Enter Valid Phone Number',
   );
+  const notesInput = useInput('', (value) =>
+    value.trim() !== '' ? null : 'Enter something to remember',
+  );
   // Create refs for the inputs
   const emailInputRef = useRef(null);
   const phoneNumberInputRef = useRef(null);
   const addressInputRef = useRef(null);
+  const notesRef = useRef(null);
 
   const handleClearForm = () => {
     nameInput.reset('');
@@ -83,9 +104,40 @@ const AddGifts = () => {
       <View style={styles.mainContainer}>
         <Card>
           <Card.Content>
-            <VTDropDown items={items} />
-            <VTDropDown label="Select Guest" items={guestList} />
-            <VTTextInput
+            <VTDropDown items={items} value={selectedEvent} onChange={setSelectedEvent} />
+            <VTDropDown
+              label="Select Guest"
+              items={guestList}
+              value={selectedGuest}
+              onChange={setSelectedGuest}
+            />
+            <VTDropDown
+              label="Gift Mode"
+              items={giftMode}
+              value={selectedGiftmode}
+              onChange={setSelectedGiftmode}
+            />
+            {selectedGiftmode === 'amount' && (
+              <>
+                <VTTextInput
+                  label="Enter Amount"
+                  {...amountInput}
+                  left={<TextInput.Icon icon="cash-multiple" />}
+                  onSubmitEditing={() => notesRef.current.focus()}
+                  onChange={setAmountInput}
+                />
+                <VTTextInput
+                  label="Notes"
+                  ref={notesRef}
+                  {...notesInput}
+                  left={<TextInput.Icon icon="text" />}
+                  style="textInput"
+                  // onSubmitEditing={() => addressInputRef.current.focus()}
+                />
+              </>
+            )}
+            {selectedGiftmode === 'item' && <Text variant="bodyLarge">ITEM</Text>}
+            {/* <VTTextInput
               label="Guest Full Name"
               {...nameInput}
               left={<TextInput.Icon icon="account" />}
@@ -110,15 +162,15 @@ const AddGifts = () => {
               ref={phoneNumberInputRef}
               {...addressInput}
               left={<TextInput.Icon icon="home" />}
-            />
-            <View style={styles.justify}>
+            /> */}
+            {/* <View style={styles.justify}>
               <Button icon="delete" mode="contained" onPress={handleClearForm} style={styles.mr10}>
                 <Text style={{ color: theme.colors.onPrimary }}>Clear</Text>
               </Button>
               <Button icon="content-save" mode="contained" onPress={handleAddGifts}>
                 <Text style={{ color: theme.colors.onPrimary }}>Save Guests</Text>
               </Button>
-            </View>
+            </View> */}
           </Card.Content>
         </Card>
       </View>
diff --git a/app/components/VTDropDown/VTDropDown.js b/app/components/VTDropDown/VTDropDown.js
index b7945b2..1d4f217 100644
--- a/app/components/VTDropDown/VTDropDown.js
+++ b/app/components/VTDropDown/VTDropDown.js
@@ -4,9 +4,9 @@ import PropTypes from 'prop-types';
 import { Dropdown } from 'react-native-element-dropdown';
 import getStyles from './styles';
 
-const VTDropDown = ({ label, items }) => {
+const VTDropDown = ({ label, items, value, onChange }) => {
   const styles = getStyles();
-  const [value, setValue] = useState('');
+  // const [value, setValue] = useState('');
   const [isFocus, setIsFocus] = useState(false);
   return (
     <View>
@@ -30,8 +30,9 @@ const VTDropDown = ({ label, items }) => {
         onFocus={() => setIsFocus(true)}
         onBlur={() => setIsFocus(false)}
         onChange={(item) => {
-          console.log('item : ', item);
-          setValue(item.value);
+          // console.log('item : ', item);
+          // setValue(item.value);
+          onChange(item.value);
           setIsFocus(false);
         }}
       />
@@ -51,5 +52,7 @@ VTDropDown.propTypes = {
       value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
     }),
   ).isRequired,
+  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
+  onChange: PropTypes.func.isRequired,
 };
 export default VTDropDown;
diff --git a/app/components/VTTextInput/VTTextInput.js b/app/components/VTTextInput/VTTextInput.js
index e39b251..fa12cc1 100644
--- a/app/components/VTTextInput/VTTextInput.js
+++ b/app/components/VTTextInput/VTTextInput.js
@@ -4,28 +4,30 @@ import { View } from 'react-native';
 import { TextInput, HelperText } from 'react-native-paper';
 import getStyles from './styles';
 
-const VTTextInput = forwardRef(({ label, value, onChangeText, onBlur, error, ...props }, ref) => {
-  const styles = getStyles();
-  return (
-    <View style={styles.mrBottom}>
-      <TextInput
-        style={styles.input}
-        mode="outlined"
-        label={label}
-        value={value}
-        onChangeText={onChangeText}
-        onBlur={onBlur}
-        ref={ref}
-        {...props}
-      />
-      {error && (
-        <HelperText type="error" visible={error}>
-          {error}
-        </HelperText>
-      )}
-    </View>
-  );
-});
+const VTTextInput = forwardRef(
+  ({ label, value, onChangeText, onBlur, error, style, ...props }, ref) => {
+    const styles = getStyles();
+    return (
+      <View>
+        <TextInput
+          style={style === undefined ? styles.input : styles.textInput}
+          mode="outlined"
+          label={label}
+          value={value}
+          onChangeText={onChangeText}
+          onBlur={onBlur}
+          ref={ref}
+          {...props}
+        />
+        {error && (
+          <HelperText type="error" visible={error}>
+            {error}
+          </HelperText>
+        )}
+      </View>
+    );
+  },
+);
 
 VTTextInput.defaultProps = {
   onBlur: () => {},
@@ -38,5 +40,6 @@ VTTextInput.propTypes = {
   onChangeText: PropTypes.func.isRequired,
   onBlur: PropTypes.func,
   error: PropTypes.string,
+  style: PropTypes.string,
 };
 export default VTTextInput;
diff --git a/app/components/VTTextInput/styles.js b/app/components/VTTextInput/styles.js
index 53a724b..196e0c9 100644
--- a/app/components/VTTextInput/styles.js
+++ b/app/components/VTTextInput/styles.js
@@ -11,6 +11,13 @@ const getStyles = () => {
     mrBottom: {
       marginBottom: 10,
     },
+    textInput: {
+      height: 100,
+      // marginVertical: 2,
+      multiline: true,
+      textAlignVertical: 'top',
+      width: 'auto',
+    },
   });
 };
 export default getStyles;
